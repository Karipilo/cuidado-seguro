// Formato AAA (3 PASOS) 
// Arrange ‚Äì Act ‚Äì Assert


import { describe, it, expect, vi } from "vitest";
import { render, screen, fireEvent } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom"; // ‚úÖ Para envolver el componente
import Formulario from "../components/Formulario";


describe("üß© Comportamiento del componente <Formulario />", () => {

    // ===========================================================
    it("‚úÖ Debe renderizar los campos principales del formulario", () => {
        // üß± 1. ARRANGE
        const mockOnLogin = vi.fn();

        render(
            <MemoryRouter>
                <Formulario onLogin={mockOnLogin} />
            </MemoryRouter>
        );

        // ‚öôÔ∏è 2. ACT ‚Üí (solo renderizado)

        // ‚úÖ 3. ASSERT
        expect(screen.getByLabelText(/correo electr√≥nico/i)).toBeInTheDocument();
        expect(screen.getByLabelText(/contrase√±a/i)).toBeInTheDocument();
        expect(screen.getByRole("button", { name: /ingresar/i })).toBeInTheDocument();
    });

    // ===========================================================
    it("‚ùå Debe mostrar error si se env√≠a sin rellenar los campos", async () => {
        // üß± 1. ARRANGE
        const mockOnLogin = vi.fn(() => false);

        render(
            <MemoryRouter>
                <Formulario onLogin={mockOnLogin} />
            </MemoryRouter>
        );

        // ‚öôÔ∏è 2. ACT
        fireEvent.submit(screen.getByRole("button", { name: /ingresar/i }));

        // ‚úÖ 3. ASSERT
        const error = await screen.findByText(/el correo debe contener '@' y terminar en '.com'/i);
        expect(error).toBeInTheDocument();
    });

    // ===========================================================
    it("‚ö†Ô∏è Debe mostrar error si la contrase√±a no cumple requisitos", () => {
        // üß± 1. ARRANGE
        const mockOnLogin = vi.fn(() => false);

        render(
            <MemoryRouter>
                <Formulario onLogin={mockOnLogin} />
            </MemoryRouter>
        );

        // ‚öôÔ∏è 2. ACT
        fireEvent.change(screen.getByLabelText(/correo electr√≥nico/i), {
            target: { value: "usuario@correo.com" },
        });
        fireEvent.change(screen.getByLabelText(/contrase√±a/i), {
            target: { value: "123" },
        });
        fireEvent.click(screen.getByRole("button", { name: /ingresar/i }));

        // ‚úÖ 3. ASSERT
        expect(screen.getByText(/la contrase√±a debe tener al menos/i)).toBeInTheDocument();
    });

    // ===========================================================
    it("üü¢ Debe llamar a onLogin si los datos son v√°lidos", () => {
        // üß± 1. ARRANGE
        const mockOnLogin = vi.fn(() => true);

        render(
            <MemoryRouter>
                <Formulario onLogin={mockOnLogin} />
            </MemoryRouter>
        );

        // ‚öôÔ∏è 2. ACT
        fireEvent.change(screen.getByLabelText(/correo electr√≥nico/i), {
            target: { value: "Usuario@correo.com" },
        });
        fireEvent.change(screen.getByLabelText(/contrase√±a/i), {
            target: { value: "Clave123@" },
        });
        fireEvent.click(screen.getByRole("button", { name: /ingresar/i }));

        // ‚úÖ 3. ASSERT
        expect(mockOnLogin).toHaveBeenCalledTimes(1);
        expect(mockOnLogin).toHaveBeenCalledWith("Usuario@correo.com", "Clave123@");
    });
});
