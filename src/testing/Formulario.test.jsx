// ===============================================================
// üß© Archivo: Formulario.test.jsx
// Descripci√≥n: Pruebas del componente <Formulario /> con Vitest
// Incluye Router para evitar el error de useNavigate().
// ===============================================================

import { describe, it, expect, vi } from "vitest"; // vi = mocks / funciones simuladas
import { render, screen, fireEvent } from "@testing-library/react";
import { BrowserRouter } from "react-router-dom"; // ‚úÖ Importamos Router
import Formulario from "../components/Formulario";

// Helper para renderizar con contexto de Router
const renderWithRouter = (ui) => {
    return render(<BrowserRouter>{ui}</BrowserRouter>);
};

// ===============================================================
// GRUPO DE PRUEBAS
// ===============================================================
describe("üß© Comportamiento del componente <Formulario />", () => {

    // ===========================================================
    // TEST 1: Renderizado correcto
    // ===========================================================
    it("‚úÖ Debe renderizar los campos principales del formulario", () => {
        // üß± 1. ARRANGE
        const mockOnLogin = vi.fn();
        renderWithRouter(<Formulario onLogin={mockOnLogin} />);

        // ‚öôÔ∏è 2. ACT ‚Üí no hay acciones (solo render)
        // ‚úÖ 3. ASSERT
        expect(screen.getByLabelText(/correo electr√≥nico/i)).toBeInTheDocument();
        expect(screen.getByLabelText(/contrase√±a/i)).toBeInTheDocument();
        expect(screen.getByRole("button", { name: /ingresar/i })).toBeInTheDocument();
    });

    // ===========================================================
    // TEST 2: Error con campos vac√≠os
    // ===========================================================
    it("‚ùå Debe mostrar error si se env√≠a sin rellenar los campos", async () => {
        // üß± 1. ARRANGE
        const mockOnLogin = vi.fn(() => false);
        renderWithRouter(<Formulario onLogin={mockOnLogin} />);

        // ‚öôÔ∏è 2. ACT
        fireEvent.submit(screen.getByRole("button", { name: /ingresar/i }));

        // ‚úÖ 3. ASSERT
        const error = await screen.findByText(/el correo debe contener '@' y terminar en '.com'/i);
        expect(error).toBeInTheDocument();
    });

    // ===========================================================
    // TEST 3: Contrase√±a no cumple requisitos
    // ===========================================================
    it("‚ö†Ô∏è Debe mostrar error si la contrase√±a no cumple requisitos", () => {
        // üß± 1. ARRANGE
        const mockOnLogin = vi.fn(() => false);
        renderWithRouter(<Formulario onLogin={mockOnLogin} />);

        // ‚öôÔ∏è 2. ACT
        fireEvent.change(screen.getByLabelText(/correo electr√≥nico/i), {
            target: { value: "usuario@correo.com" },
        });
        fireEvent.change(screen.getByLabelText(/contrase√±a/i), {
            target: { value: "123" },
        });
        fireEvent.click(screen.getByRole("button", { name: /ingresar/i }));

        // ‚úÖ 3. ASSERT
        expect(screen.getByText(/la contrase√±a debe tener al menos/i))
            .toBeInTheDocument();
    });

    // ===========================================================
    // TEST 4: Datos v√°lidos ‚Üí onLogin llamado
    // ===========================================================
    it("üü¢ Debe llamar a onLogin si los datos son v√°lidos", () => {
        // üß± 1. ARRANGE
        const mockOnLogin = vi.fn(() => true);
        renderWithRouter(<Formulario onLogin={mockOnLogin} />);

        // ‚öôÔ∏è 2. ACT
        fireEvent.change(screen.getByLabelText(/correo electr√≥nico/i), {
            target: { value: "Usuario@correo.com" },
        });
        fireEvent.change(screen.getByLabelText(/contrase√±a/i), {
            target: { value: "Clave123@" },
        });
        fireEvent.click(screen.getByRole("button", { name: /ingresar/i }));

        // ‚úÖ 3. ASSERT
        expect(mockOnLogin).toHaveBeenCalledTimes(1);
        expect(mockOnLogin).toHaveBeenCalledWith("Usuario@correo.com", "Clave123@");
    });
});
